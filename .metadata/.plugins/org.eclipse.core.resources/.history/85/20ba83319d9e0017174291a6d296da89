package com.sismo.mx.rest;

import java.util.List;

import javax.mail.MessagingException;
import javax.validation.Valid;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.sismo.mx.commons.AppUserService;
import com.sismo.mx.commons.dto.AppUserDTO;
import com.sismo.mx.commons.dto.EmailDTO;
import com.sismo.mx.commons.dto.FamiliarDTO;
import com.sismo.mx.commons.exception.NotFoundException;
import com.sismo.mx.rest.parser.AppUserParser;
import com.sismo.mx.rest.vo.AppUserVO;
import com.sismo.mx.rest.vo.EmailVO;
import com.sismo.mx.rest.vo.FamiliarVO;

@RestController
@RequestMapping("/users")
@SuppressWarnings("rawtypes")
public class AppUserCtrlImpl implements AppUserCtrl{

	private static final Logger logger = Logger.getLogger(AppUserCtrl.class);
	
	@Autowired private AppUserService appUserService;
	@Autowired private AppUserParser appUserParser;
	
	@Override
	@RequestMapping(method = RequestMethod.GET)
	public ResponseEntity getAllAppUsers() {
		logger.info("CTRL: getAllAppUsers method");
		
		List<AppUserDTO> appUserDTOs = 
				this.appUserService.getAllAppUsers();
		
		List<AppUserVO> appUserVOs = 
				this.appUserParser.parseToUserVOList(appUserDTOs);
		
		return new ResponseEntity<>(appUserVOs, HttpStatus.OK);
	}

	@Override
	@RequestMapping(value = "/send-email", method = RequestMethod.POST)
	public ResponseEntity sendEmail(
			 @Valid @RequestBody EmailVO emailVO, BindingResult bindingResult) throws MessagingException {
		logger.info("CTRL: sendEmail method");
		
		if (bindingResult.hasErrors())
			return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
		
			EmailDTO dto = this.appUserParser.parseToEmailDTO(emailVO);
			this.appUserService.sendEmail(dto);
			return new ResponseEntity(HttpStatus.NO_CONTENT);
			
	}

	@SuppressWarnings("unchecked")
	@Override
	@RequestMapping(value = "/families" , method = RequestMethod.POST)
	public ResponseEntity createFamiliar(
			@Valid @RequestBody FamiliarVO familiarVO, BindingResult bindingResult) {
		logger.info("CTRL: createFamiliar method");
		
		if (bindingResult.hasErrors())
			return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
		
		FamiliarDTO dto = this.appUserParser.parseToFamiliarDTO(familiarVO);
		Integer id = this.appUserService.createFamiliar(dto);
		
		return new ResponseEntity(id, HttpStatus.OK);
	}

	@Override
	@RequestMapping(value = "/families", method = RequestMethod.GET)
	public ResponseEntity getAllFamilies() {
		logger.info("CTRL: getAllFamilies method");
		
		List<FamiliarDTO> dtos = this.appUserService.getAllFamilies();
		List<FamiliarVO> familiarVOs = 
				this.appUserParser.parseToFamiliarVOList(dtos);
		
		return new ResponseEntity<>(familiarVOs, HttpStatus.OK);
	}

	@Override
	@RequestMapping(value = "/families/familiar", method = RequestMethod.GET)
	public ResponseEntity getFamilyDetails(
			@PathVariable(name = "id") Long id) {
		logger.info("CTRL: getFamilyDetails method");
		
		try {
			FamiliarDTO dto = this.appUserService.getFamiliarDetails(id);
			FamiliarVO familiarVO = this.appUserParser.parseToFamiliarVO(dto);
			return new ResponseEntity<>(familiarVO, HttpStatus.OK);
			
		} catch (NotFoundException e) {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}	
}
